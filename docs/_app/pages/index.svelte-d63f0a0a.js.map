{"version":3,"file":"index.svelte-d63f0a0a.js","sources":["../../../../../src/lib/connectable.js","../../../../../src/lib/Link.svelte","../../../../../src/lib/pannable.js","../../../../../src/lib/Pannable.svelte","../../../../../src/lib/Connectable.svelte","../../../../../src/lib/PanHandle.svelte","../../../../../src/lib/Demo.svelte"],"sourcesContent":["// heavily inspired by svelte-dnd-action\r\n// https://github.com/isaacHagoel/svelte-dnd-action/blob/master/src/pointerAction.js\r\n\r\nimport { styleActiveDropZones, styleInactiveDropZones } from './helpers/styler';\r\n\r\nconst MIN_MOVEMENT_BEFORE_DRAG_START_PX = 3;\r\nconst DEFAULT_DROP_TARGET_STYLE = {\r\n\toutline: 'rgba(255, 255, 102, 0.7) solid 2px'\r\n};\r\n\r\nlet currentMousePosition;\r\nlet dragStartMousePosition;\r\nlet originalDragTarget;\r\nlet isWorkingOnPreviousDrag = false;\r\nlet finalizingPreviousDrag = false;\r\n\r\nlet originDropZone;\r\nconst DEFAULT_DROP_ZONE_TYPE = '--any--';\r\n\r\n// a map from type to a set of drop-zones\r\nconst typeToDropZones = new Map();\r\n\r\nconst printDebug = (generateMessage, logFunction = console.debug) => {\r\n\tconst message = generateMessage();\r\n\tif (Array.isArray(message)) {\r\n\t\tlogFunction(...message);\r\n\t} else {\r\n\t\tlogFunction(message);\r\n\t}\r\n};\r\n\r\n/* drop-zones registration management */\r\nfunction registerDropZone(dropZoneEl, type) {\r\n\tprintDebug(() => 'registering drop-zone if absent');\r\n\tif (!typeToDropZones.has(type)) {\r\n\t\ttypeToDropZones.set(type, new Set());\r\n\t}\r\n\tif (!typeToDropZones.get(type).has(dropZoneEl)) {\r\n\t\ttypeToDropZones.get(type).add(dropZoneEl);\r\n\t\tincrementActiveDropZoneCount();\r\n\t}\r\n}\r\n\r\nfunction unregisterDropZone(dropZoneEl, type) {\r\n\ttypeToDropZones.get(type).delete(dropZoneEl);\r\n\tdecrementActiveDropZoneCount();\r\n\tif (typeToDropZones.get(type).size === 0) {\r\n\t\ttypeToDropZones.delete(type);\r\n\t}\r\n}\r\n\r\nexport function connectable(node, options) {\r\n\tlet initialized = false;\r\n\tconst config = {\r\n\t\titems: undefined,\r\n\t\ttype: undefined,\r\n\t\tflipDurationMs: 0,\r\n\t\tdragDisabled: false,\r\n\t\tmorphDisabled: false,\r\n\t\tdropFromOthersDisabled: false,\r\n\t\tdropTargetStyle: DEFAULT_DROP_TARGET_STYLE,\r\n\t\tdropTargetClasses: [],\r\n\t\ttransformDraggedElement: () => {},\r\n\t\tcentreDraggedOnCursor: false\r\n\t};\r\n\r\n\t/* events fired on the draggable target */\r\n\tnode.addEventListener('mousedown', handleMouseDown);\r\n\tnode.addEventListener('touchstart', handleMouseDown);\r\n\r\n\tfunction handleMouseDown(e) {\r\n\t\t// on safari clicking on a select element doesn't fire mouseup at the end of the click and in general this makes more sense\r\n\t\tif (\r\n\t\t\te.target !== e.currentTarget &&\r\n\t\t\t(e.target.value !== undefined || e.target.isContentEditable)\r\n\t\t) {\r\n\t\t\tprintDebug(() => \"won't initiate drag on a nested input element\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// prevents responding to any button but left click which equals 0 (which is falsy)\r\n\t\tif (e.button) {\r\n\t\t\tprintDebug(() => `ignoring none left click button: ${e.button}`);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (e.target !== node) {\r\n\t\t\tprintDebug(() => `must connect from the connectable, not a child element: ${e.button}`);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\te.stopPropagation();\r\n\t\tconst c = e.touches ? e.touches[0] : e;\r\n\t\tdragStartMousePosition = { x: c.clientX, y: c.clientY };\r\n\t\tcurrentMousePosition = { ...dragStartMousePosition };\r\n\t\toriginalDragTarget = e.currentTarget;\r\n\t\taddMaybeListeners();\r\n\t}\r\n\r\n\tfunction addMaybeListeners() {\r\n\t\twindow.addEventListener('mousemove', handleMouseMoveMaybeDragStart, { passive: false });\r\n\t\twindow.addEventListener('touchmove', handleMouseMoveMaybeDragStart, {\r\n\t\t\tpassive: false,\r\n\t\t\tcapture: false\r\n\t\t});\r\n\t\twindow.addEventListener('mouseup', handleFalseAlarm, { passive: false });\r\n\t\twindow.addEventListener('touchend', handleFalseAlarm, { passive: false });\r\n\t}\r\n\r\n\tfunction removeMaybeListeners() {\r\n\t\twindow.removeEventListener('mousemove', handleMouseMoveMaybeDragStart);\r\n\t\twindow.removeEventListener('touchmove', handleMouseMoveMaybeDragStart);\r\n\t\twindow.removeEventListener('mouseup', handleFalseAlarm);\r\n\t\twindow.removeEventListener('touchend', handleFalseAlarm);\r\n\t}\r\n\r\n\tfunction handleFalseAlarm() {\r\n\t\tremoveMaybeListeners();\r\n\t\toriginalDragTarget = undefined;\r\n\t\tdragStartMousePosition = undefined;\r\n\t\tcurrentMousePosition = undefined;\r\n\t}\r\n\r\n\tfunction handleMouseMoveMaybeDragStart(e) {\r\n\t\te.preventDefault();\r\n\t\tconst c = e.touches ? e.touches[0] : e;\r\n\t\tcurrentMousePosition = { x: c.clientX, y: c.clientY };\r\n\t\tif (\r\n\t\t\tMath.abs(currentMousePosition.x - dragStartMousePosition.x) >=\r\n\t\t\t\tMIN_MOVEMENT_BEFORE_DRAG_START_PX ||\r\n\t\t\tMath.abs(currentMousePosition.y - dragStartMousePosition.y) >=\r\n\t\t\t\tMIN_MOVEMENT_BEFORE_DRAG_START_PX\r\n\t\t) {\r\n\t\t\tremoveMaybeListeners();\r\n\t\t\thandleDragStart();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction handleDragStart() {\r\n\t\tisWorkingOnPreviousDrag = true;\r\n\r\n\t\t// initialising globals\r\n\t\toriginDropZone = originalDragTarget.parentElement;\r\n\t\t/** @type {ShadowRoot | HTMLDocument} */\r\n\t\tconst rootNode = originDropZone.getRootNode();\r\n\t\tconst originDropZoneRoot = rootNode.body || rootNode;\r\n\r\n\t\t// styleActiveDropZones(\r\n\t\t// \tArray.from(typeToDropZones.get(config.type)).filter(\r\n\t\t// \t\t(dz) => dz === originDropZone || !dzToConfig.get(dz).dropFromOthersDisabled\r\n\t\t// \t),\r\n\t\t// \t(dz) => dzToConfig.get(dz).dropTargetStyle,\r\n\t\t// \t(dz) => dzToConfig.get(dz).dropTargetClasses\r\n\t\t// );\r\n\r\n\t\t// dispatchConsiderEvent(originDropZone, items, {\r\n\t\t// \ttrigger: TRIGGERS.DRAG_STARTED,\r\n\t\t// \tid: draggedElData[ITEM_ID_KEY],\r\n\t\t// \tsource: SOURCES.POINTER\r\n\t\t// });\r\n\r\n\t\tconst config = { attributes: true, childList: false, subtree: false };\r\n\r\n\t\t// Callback function to execute when mutations are observed\r\n\t\tconst callback = function (mutationsList, observer) {\r\n\t\t\t// re-dispatch when the target changes, to update UI\r\n\t\t\tnode.dispatchEvent(\r\n\t\t\t\tnew CustomEvent('connecting', {\r\n\t\t\t\t\tdetail: { node, ...currentMousePosition }\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t};\r\n\r\n\t\t// Create an observer instance linked to the callback function\r\n\t\tconst observer = new MutationObserver(callback);\r\n\r\n\t\t// Start observing the target node for configured mutations\r\n\t\tobserver.observe(node, config);\r\n\r\n\t\tfunction handleDisconnect(e) {\r\n\t\t\tconsole.log('HANDLING Source DISCONNECT');\r\n\t\t\tobserver.disconnect();\r\n\t\t\tnode.removeEventListener('disconnect', handleDisconnect);\r\n\t\t}\r\n\r\n\t\t// listen for disconnect events, so observer is removed\r\n\t\tnode.addEventListener('disconnect', handleDisconnect);\r\n\r\n\t\t// handing over to global handlers - starting to watch the element\r\n\t\twindow.addEventListener('mousemove', handleMouseMove, { passive: false });\r\n\t\twindow.addEventListener('touchmove', handleMouseMove, { passive: false, capture: false });\r\n\t\twindow.addEventListener('mouseup', handleDrop, { passive: false });\r\n\t\twindow.addEventListener('touchend', handleDrop, { passive: false });\r\n\t}\r\n\r\n\t// Global mouse/touch-events handlers\r\n\tfunction handleMouseMove(e) {\r\n\t\te.preventDefault();\r\n\t\tconst c = e.touches ? e.touches[0] : e;\r\n\t\tcurrentMousePosition = { x: c.clientX, y: c.clientY };\r\n\r\n\t\tnode.dispatchEvent(\r\n\t\t\tnew CustomEvent('connecting', {\r\n\t\t\t\tdetail: { node, ...currentMousePosition }\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\tfunction handleDrop(event) {\r\n\t\tconsole.log('dropped ');\r\n\t\tfinalizingPreviousDrag = true;\r\n\t\t// cleanup\r\n\t\twindow.removeEventListener('mousemove', handleMouseMove);\r\n\t\twindow.removeEventListener('touchmove', handleMouseMove);\r\n\t\twindow.removeEventListener('mouseup', handleDrop);\r\n\t\twindow.removeEventListener('touchend', handleDrop);\r\n\r\n\t\t// get drop area element target, the target over which the touch event ended/mouseup\r\n\r\n\t\t// const c = event.touches ? event.touches[0] : event;\r\n\t\tconst lifted = event.changedTouches;\r\n\r\n\t\tlet target = lifted\r\n\t\t\t? document.elementFromPoint(lifted[0].clientX, lifted[0].clientY)\r\n\t\t\t: event.target;\r\n\r\n\t\tnode.dispatchEvent(\r\n\t\t\tnew CustomEvent('connected', {\r\n\t\t\t\tdetail: { target } // passes a non updating copy up\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\t/* Also set up Observer monitor to resend event on change */\r\n\t\t/* When target changes, observer sends out a new event to redraw */\r\n\r\n\t\t// Options for the observer (which mutations to observe)\r\n\t\tconst config = { attributes: true, childList: false, subtree: false };\r\n\r\n\t\t// Callback function to execute when mutations are observed\r\n\t\tconst callback = function (mutationsList, observer) {\r\n\t\t\t// re-dispatch when the target changes, to update UI\r\n\t\t\tnode.dispatchEvent(\r\n\t\t\t\tnew CustomEvent('connected', {\r\n\t\t\t\t\tdetail: { target } // passes a non updating copy up\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t};\r\n\r\n\t\t// Create an observer instance linked to the callback function\r\n\t\tconst observer = new MutationObserver(callback);\r\n\r\n\t\t// Start observing the target node for configured mutations\r\n\t\tobserver.observe(target, config);\r\n\r\n\t\tfunction handleDisconnect(e) {\r\n\t\t\tconsole.log('HANDLING DISCONNECT');\r\n\t\t\tobserver.disconnect();\r\n\t\t\ttarget.removeEventListener('disconnect', handleDisconnect);\r\n\t\t}\r\n\r\n\t\t// listen for disconnect events, so observer is removed\r\n\t\ttarget.addEventListener('disconnect', handleDisconnect);\r\n\t}\r\n\r\n\treturn {\r\n\t\tdestroy() {}\r\n\t};\r\n}\r\n","<script>\r\n\t// https://github.com/Rich-Harris/svelte-d3-arc-demo/blob/master/src/Viz.svelte\r\n\t// https://github.com/d3/d3-shape/blob/v3.1.0/README.md#_link\r\n\timport { onMount } from 'svelte';\r\n\timport { link, curveBumpX } from 'd3-shape';\r\n\r\n\texport let target;\r\n\texport let source;\r\n\r\n\texport let width = 500;\r\n\texport let height = 500;\r\n\r\n\texport let strokeColor = 'green';\r\n\texport let strokeWidth = 3;\r\n\texport let arrowColor = 'green';\r\n\texport let startOffset = '60%';\r\n\r\n\tconst generateXcurve = link(curveBumpX);\r\n\r\n\tlet svg, mounted;\r\n\tlet sourceEl, targetEl;\r\n\tlet x1, x2, y1, y2;\r\n\r\n\tonMount(() => {\r\n\t\tmounted = true;\r\n\t});\r\n\r\n\t// if x1 < x2, x1 + width\r\n\t$: if (mounted) {\r\n\t\tx1 = x1 < target.offsetLeft ? source.offsetLeft + source.clientWidth : source.offsetLeft;\r\n\t}\r\n\t$: if (mounted) {\r\n\t\ty1 = source.offsetTop + source.clientHeight / 2;\r\n\t\t// y1 = y1 < y2 ? source.offsetTop + source.clientHeight : source.offsetTop\r\n\t}\r\n\t$: if (mounted) {\r\n\t\tx2 = target.offsetLeft; // + target.offsetWidth/2\r\n\t}\r\n\t$: if (mounted) {\r\n\t\ty2 = target.offsetTop + target.offsetHeight / 2;\r\n\t}\r\n\r\n\t$: d = generateXcurve({ source: [x1, y1], target: [x2, y2] });\r\n\r\n\t$: target && console.log('Connecting', { target });\r\n</script>\r\n\r\n<svelte:head\r\n\t><link rel=\"stylesheet\" type=\"text/css\" href=\"//fonts.googleapis.com/css?family=Luckiest+Guy\" />\r\n</svelte:head>\r\n\r\n<span class=\"svg-container\">\r\n\t<svg bind:this={svg} {width} {height}>\r\n\t\t<defs>\r\n\t\t\t<marker\r\n\t\t\t\tid=\"triangle\"\r\n\t\t\t\tviewBox=\"0 0 10 10\"\r\n\t\t\t\trefX=\"1\"\r\n\t\t\t\trefY=\"5\"\r\n\t\t\t\tmarkerUnits=\"strokeWidth\"\r\n\t\t\t\tmarkerWidth=\"4\"\r\n\t\t\t\tmarkerHeight=\"3\"\r\n\t\t\t\torient=\"auto\"\r\n\t\t\t>\r\n\t\t\t\t<path d=\"M 0 0 L 10 5 L 0 10 z\" fill=\"context-stroke\" />\r\n\t\t\t</marker>\r\n\t\t</defs>\r\n\t\t{#if x1 && y2}\r\n\t\t\t<g stroke=\"red\" stroke-opacity=\"0.9\">\r\n\t\t\t\t<path\r\n\t\t\t\t\t{d}\r\n\t\t\t\t\tid=\"path1\"\r\n\t\t\t\t\tstroke-width={strokeWidth}\r\n\t\t\t\t\tstroke={strokeColor}\r\n\t\t\t\t\tfill=\"none\"\r\n\t\t\t\t\tstroke-linecap=\"round\"\r\n\t\t\t\t\tmarker-mid=\"url(#triangle)\"\r\n\t\t\t\t\tstyle=\"\"\r\n\t\t\t\t/>\r\n\t\t\t</g>\r\n\t\t{/if}\r\n\t\t<text>\r\n\t\t\t<textPath xlink:href=\"#path1\" startOffset={'20%'}>\r\n\t\t\t\t<tspan fill=\"black\">Curvy Connector</tspan>\r\n\t\t\t</textPath>\r\n\t\t\t<textPath xlink:href=\"#path1\" {startOffset} fill={arrowColor}>➤</textPath>\r\n\t\t</text>\r\n\t</svg>\r\n</span>\r\n\r\n<style>\r\n\t.svg-container {\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tz-index: -2;\r\n\t}\r\n\tsvg {\r\n\t\tposition: absolute;\r\n\t\tfloat: left;\r\n\t\tstroke-width: 5;\r\n\t\tborder: 1px dashed blue;\r\n\t\tz-index: -1;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t}\r\n\r\n\ttext {\r\n\t\tfont-family: arrows;\r\n\t\tfont-size: 1.5em;\r\n\t\tfill: grey;\r\n\t\tdominant-baseline: central;\r\n\t}\r\n\r\n\ttspan {\r\n\t\tfont-family: 'Luckiest Guy', cursive;\r\n\t\tfont-size: 0.5em;\r\n\t\t/* font-family: Impact; */\r\n\t\tdominant-baseline: ideographic;\r\n\t}\r\n\r\n\t@font-face {\r\n\t\tfont-family: arrows;\r\n\t\t/* src: url(arrows.woff); */\r\n\t}\r\n</style>\r\n","export function pannable(node) {\r\n\tlet x;\r\n\tlet y;\r\n\r\n\tfunction handleMousedown(event) {\r\n\t\tevent.stopPropagation();\r\n\t\tconst c = event.touches ? event.touches[0] : event;\r\n\r\n\t\tx = c.clientX;\r\n\t\ty = c.clientY;\r\n\r\n\t\tnode.dispatchEvent(\r\n\t\t\tnew CustomEvent('panstart', {\r\n\t\t\t\tdetail: { x, y }\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\twindow.addEventListener('mousemove', handleMousemove);\r\n\t\twindow.addEventListener('mouseup', handleMouseup);\r\n\r\n\t\twindow.addEventListener('touchmove', handleMousemove);\r\n\t\twindow.addEventListener('touchend', handleMouseup);\r\n\t}\r\n\r\n\tfunction handleMousemove(event) {\r\n\t\tevent.preventDefault();\r\n\t\tconst c = event.touches ? event.touches[0] : event;\r\n\r\n\t\tconst dx = c.clientX - x;\r\n\t\tconst dy = c.clientY - y;\r\n\t\tx = c.clientX;\r\n\t\ty = c.clientY;\r\n\r\n\t\tnode.dispatchEvent(\r\n\t\t\tnew CustomEvent('panmove', {\r\n\t\t\t\tdetail: { x, y, dx, dy }\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\tfunction handleMouseup(event) {\r\n\t\tx = event.clientX;\r\n\t\ty = event.clientY;\r\n\r\n\t\tnode.dispatchEvent(\r\n\t\t\tnew CustomEvent('panend', {\r\n\t\t\t\tdetail: { x, y }\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\twindow.removeEventListener('mousemove', handleMousemove);\r\n\t\twindow.removeEventListener('mouseup', handleMouseup);\r\n\r\n\t\twindow.removeEventListener('touchmove', handleMousemove);\r\n\t\twindow.removeEventListener('touchend', handleMouseup);\r\n\t}\r\n\r\n\tnode.addEventListener('mousedown', handleMousedown);\r\n\tnode.addEventListener('touchstart', handleMousedown);\r\n\r\n\treturn {\r\n\t\tdestroy() {\r\n\t\t\tnode.removeEventListener('mousedown', handleMousedown);\r\n\t\t\tnode.removeEventListener('touchstart', handleMousedown);\r\n\t\t}\r\n\t};\r\n}\r\n","<script>\r\n\timport { onMount } from 'svelte';\r\n\timport { spring } from 'svelte/motion';\r\n\timport { pannable } from './pannable.js';\r\n\r\n\texport let panElement;\r\n\texport let x = 0;\r\n\texport let y = 0;\r\n\r\n\tconst coords = spring(\r\n\t\t{ x, y },\r\n\t\t{\r\n\t\t\tstiffness: 0.2,\r\n\t\t\tdamping: 0.4\r\n\t\t}\r\n\t);\r\n\r\n\tfunction handlePanStart() {\r\n\t\tcoords.stiffness = coords.damping = 1;\r\n\t}\r\n\r\n\tfunction handlePanMove(event) {\r\n\t\tcoords.update(($coords) => ({\r\n\t\t\tx: $coords.x + event.detail.dx,\r\n\t\t\ty: $coords.y + event.detail.dy\r\n\t\t}));\r\n\t}\r\n\r\n\tfunction handlePanEnd(event) {\r\n\t\tcoords.stiffness = 0.2;\r\n\t\tcoords.damping = 0.4;\r\n\t\tcoords.set({ x, y });\r\n\t}\r\n\r\n\t$: if ($coords) panElement = panElement; // even though the variable is bound, still needs update like this\r\n\r\n\tonMount(() => {\r\n\t\tpanElement = panElement; // initialize the element\r\n\t});\r\n</script>\r\n\r\n<div\r\n\tclass=\"box\"\r\n\tbind:this={panElement}\r\n\tuse:pannable\r\n\ton:panstart={handlePanStart}\r\n\ton:panmove={handlePanMove}\r\n\ton:panend={handlePanEnd}\r\n\tstyle=\"\r\n    left: {$coords.x}px;\r\n    top: {$coords.y}px;\r\n    \"\r\n>\r\n\t<slot>Pull on me</slot>\r\n</div>\r\n\r\n<style>\r\n\t.box {\r\n\t\t--width: 100px;\r\n\t\t--height: 100px;\r\n\t\tposition: absolute;\r\n\t\twidth: var(--width);\r\n\t\theight: var(--height);\r\n\t\tleft: calc(50% - var(--width) / 2);\r\n\t\ttop: calc(50% - var(--height) / 2);\r\n\t\tborder-radius: 4px;\r\n\t\tbackground-color: #ff3e00;\r\n\t\tcursor: move;\r\n\t\tpadding: 0.5em;\r\n\t}\r\n</style>\r\n","<script>\r\n\timport { onMount } from 'svelte';\r\n\timport { spring } from 'svelte/motion';\r\n\timport { connectable } from './connectable.js';\r\n\timport Link from './Link.svelte';\r\n\timport Pannable from './Pannable.svelte';\r\n\r\n\texport let node = { x: 10, y: 10 };\r\n\t$: x = node.x;\r\n\t$: y = node.y;\r\n\r\n\texport let source; // start of the connection\r\n\texport let target; // end of the connection\r\n\r\n\tlet prevTarget; // to keep track of connection changes, ie: disconnect\r\n\r\n\tfunction handleConnecting(event) {\r\n\t\tsource = event.detail.node;\r\n\t\t// if connecting, set the target to the mouse pointer\r\n\t\ttarget = {\r\n\t\t\toffsetLeft: event.detail.x,\r\n\t\t\toffsetTop: event.detail.y,\r\n\t\t\toffsetWidth: 0,\r\n\t\t\toffsetHeight: 0\r\n\t\t};\r\n\t}\r\n\r\n\tfunction handleConnected(event) {\r\n\t\t// mutation observer in action directive script\r\n\t\t// fires update event if target attributes change\r\n\t\t// keeping this target reference up to date\r\n\t\ttarget = event.detail.target;\r\n\r\n\t\t// if new target, fire disconnect event on old target element\r\n\t\tif (prevTarget && prevTarget !== target)\r\n\t\t\tprevTarget.dispatchEvent(new CustomEvent('disconnect'));\r\n\r\n\t\tprevTarget = target; // reset target\r\n\t}\r\n</script>\r\n\r\n<div\r\n\tclass=\"endpoint\"\r\n\tuse:connectable\r\n\ton:connecting={handleConnecting}\r\n\ton:connected={handleConnected}\r\n\tstyle=\"left: {x}px; top: {y}px;\"\r\n>\r\n\t<slot />\r\n</div>\r\n\r\n<style>\r\n\t:root {\r\n\t\t--size: 6em;\r\n\t}\r\n\t.endpoint {\r\n\t\tposition: relative;\r\n\t\tbackground-color: #baf3ca80;\r\n\t\tbox-shadow: 0 0 2px black;\r\n\t\ttransition: box-shadow 0.25s ease-in;\r\n\t\tcursor: pointer;\r\n\t\topacity: 0.5;\r\n\t\tborder: 1px dashed black;\r\n\t\tborder-radius: 2px;\r\n\t\twidth: var(--size);\r\n\t\theight: var(--size);\r\n\t\tpadding: calc(var(--size) / 8);\r\n\t}\r\n\t.endpoint:hover {\r\n\t\tbox-shadow: 0 0 6px black;\r\n\t}\r\n</style>\r\n","<script>\r\n\timport { createEventDispatcher, onMount } from 'svelte';\r\n\r\n\texport let nodes;\r\n\texport let node;\r\n\texport let mouseMoving;\r\n\r\n\tconst dispatch = createEventDispatcher();\r\n\r\n\tlet pannable;\r\n\r\n\tonMount(async () => {\r\n\t\t({ pannable } = await import('./pannable'));\r\n\t});\r\n\r\n\tfunction handlePanStart(event) {\r\n\t\tmouseMoving = true;\r\n\t\t// nodes = nodes; // if this is here, the boxes jump when mouse clicks up\r\n\t\tdispatch('resimulate', 'resimulate');\r\n\t}\r\n\r\n\tfunction handlePanMove(event) {\r\n\t\tmouseMoving = true;\r\n\r\n\t\tnode.x = node.x + event.detail.dx;\r\n\t\tnode.y = node.y + event.detail.dy;\r\n\t\tnode = node;\r\n\r\n\t\tnodes[node.index] = { ...nodes[node.index], x: node.x, y: node.y };\r\n\t\tnodes = nodes;\r\n\t\t// dispatch('resimulate', 'resimulate'); // makes them stay still when mouse moving for a while\r\n\t}\r\n\r\n\tfunction handlePanEnd(event) {\r\n\t\tmouseMoving = false;\r\n\t\tnodes = nodes; // if this is here, the boxes jump when mouse clicks up\r\n\t\tdispatch('resimulate', 'resimulate');\r\n\t}\r\n</script>\r\n\r\n{#if pannable}\r\n\t<div\r\n\t\tclass=\"dragger\"\r\n\t\tuse:pannable\r\n\t\ton:panmove={handlePanMove}\r\n\t\ton:panend={handlePanEnd}\r\n\t\ton:panstart={handlePanStart}\r\n\t>\r\n\t\t<svg\r\n\t\t\twidth=\"20\"\r\n\t\t\theight=\"20\"\r\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\t\taria-hidden=\"true\"\r\n\t\t\tclass=\"svg-inline--fa fa-arrows-alt fa-w-16\"\r\n\t\t\tdata-icon=\"arrows-alt\"\r\n\t\t\tdata-prefix=\"fas\"\r\n\t\t\tviewBox=\"0 0 512 512\"\r\n\t\t\t><defs /><path\r\n\t\t\t\tfill=\"currentColor\"\r\n\t\t\t\td=\"M352 426l-79 79c-9 9-25 9-34 0l-79-79c-15-15-5-41 17-41h51V284H127v51c0 22-26 32-41 17L7 273c-9-9-9-25 0-34l79-79c15-15 41-5 41 17v51h101V127h-51c-22 0-32-26-17-41l79-79c9-9 25-9 34 0l79 79c15 15 5 41-17 41h-51v101h101v-51c0-22 26-32 41-17l79 79c9 9 9 25 0 34l-79 79c-15 15-41 5-41-17v-51H284v101h51c22 0 32 26 17 41z\"\r\n\t\t\t/></svg\r\n\t\t>\r\n\t</div>\r\n{/if}\r\n\r\n<style>\r\n\t.dragger {\r\n\t\tcursor: grab;\r\n\t\tuser-select: none;\r\n\t\tcolor: rgba(255, 255, 255, 0.69);\r\n\t\ttext-align: center;\r\n\t\tbackground: rgba(0, 0, 0, 0.103);\r\n\t\tmargin-top: 7px;\r\n\t\tmargin-right: 7px;\r\n\t\tpadding: 7px 7px 4px 7px;\r\n\t\tborder-radius: 3px;\r\n\t\tborder: 0px solid #aaa;\r\n\t\tposition: absolute;\r\n\t\ttop: 1px;\r\n\t\tright: 1px;\r\n\t}\r\n</style>\r\n","<script>\r\n\timport { spring } from 'svelte/motion';\r\n\timport Connectable from './Connectable.svelte';\r\n\timport PanHandle from './PanHandle.svelte';\r\n\timport Pannable from './Pannable.svelte';\r\n\timport Link from './Link.svelte';\r\n\r\n\tlet nodes = {\r\n\t\tconnections: []\r\n\t};\r\n\r\n\tlet node = { x: 10, y: 10 };\r\n\tlet source;\r\n\tlet target;\r\n</script>\r\n\r\n<div class=\"wrapper\">\r\n\t<Connectable bind:source bind:target bind:node>\r\n\t\t<PanHandle {nodes} bind:node />\r\n\t\tConnect from Me</Connectable\r\n\t>\r\n\r\n\t<Pannable x={200} y={200}>Connect to me, then pull on me.</Pannable>\r\n\r\n\t{#if source && target}\r\n\t\t<Link {source} {target} />\r\n\t{/if}\r\n</div>\r\n\r\n<style>\r\n\t.wrapper {\r\n\t\tdisplay: flex;\r\n\t\tposition: relative;\r\n\t\tmargin: 0px;\r\n\t\tborder: dotted 3px black;\r\n\t\tborder-radius: 4px;\r\n\t\twidth: auto;\r\n\t\theight: 800px;\r\n\t}\r\n</style>\r\n"],"names":["create_if_block","curveBumpX"],"mappings":"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"}